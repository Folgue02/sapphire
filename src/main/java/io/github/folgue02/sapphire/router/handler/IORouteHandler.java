package io.github.folgue02.sapphire.router.handler;

import io.github.folgue02.sapphire.exchange.HttpRequest;
import io.github.folgue02.sapphire.exchange.HttpResponse;

/// An [IORouteHandler] is a child of the [RouteHandler] class, with the difference that it adds
/// a set of method definitions for the use case of a handler which reads from the request object [#handleInput(HttpRequest)],
/// runs some business logic [#run(HttpRequest, HttpResponse, Object)], and based on the result of this operations,
/// writes to the response [#handleOutput(HttpResponse, Object)].
///
/// A good example for this would be receiving the data from a submitted form *([#handleInput(HttpRequest)])*,
/// insert the record in the database *([#run(HttpRequest, HttpResponse, IN)])* and then based on the returned/generated
/// data, gather some data to display in the view *([#handleOutput(HttpResponse, OUT)])*.
///
/// **NOTE**: The [RouteHandler#runHandler(HttpRequest, HttpResponse)] method comes from the [RouteHandler] class, but its already implemented
/// here, which involves the execution of the rest of methods.
public abstract class IORouteHandler<IN, OUT> extends RouteHandler {
	/// Receives the request and forms an object, probably containing the data of the request
	/// which will be passed to the [#run(HttpRequest, HttpResponse, IN)] method to be processed.
	///
	/// @param request Request object.
	/// @return Object formed with the request's data.
	/// @throws Exception If it fails.
	public abstract IN handleInput(HttpRequest request) throws Exception;

	/// Runs the business logic using the data obtained from the object created in the [#handleInput(HttpRequest)]
	/// and generates an object to be passed to the [#handleOutput(HttpResponse, Object)].
	///
	/// @param request Request object
	/// @param response Response object
	/// @param processedInput Object generated by the [#handleInput(HttpRequest)] containing data from the request.
	/// @return Object which contains data to be used to write to the response *(i.e. data to display in the view)*
	public abstract OUT run(HttpRequest request, HttpResponse response, IN processedInput) throws Exception;

	/// Handles the output generated by the business logic ran in [#run(HttpRequest, HttpResponse, IN)]
	/// and forms the [HttpResponse] to be written back to the client.
	/// 
	/// @param response Response object to write to.
	/// @param output Output object generated by the [#run(HttpRequest, HttpResponse, IN)] method.
	/// @throws Exception If an error occurs.
	public abstract HttpResponse handleOutput(HttpResponse response, OUT output) throws Exception;

	@Override
	public HttpResponse runHandler(HttpRequest request, HttpResponse response) throws Exception {
		IN input = handleInput(request);
		OUT output = run(request, response, input);

		return handleOutput(response, output);
	}
}
